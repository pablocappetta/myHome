openapi: 3.0.2
info:
  title: myHome API Documentation
  version: 1.0.0
  description: API endpoints for the myHome application
servers:
  - url: https://www.api.myhome.com.ar/v1
    description: Production server
paths:
  /realtors:
    post:
      summary: Register a new realtor agency
      tags:
        - Realtors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Realtor"
      responses:
        "201":
          description: Successfully registered the agency
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Realtor"
        "400":
          description: Invalid input data
  /realtors/me:
    get:
      summary: Get current realtor's profile
      tags:
        - Realtors
      responses:
        "200":
          description: Realtor profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Realtor"
        "401":
          description: Unauthorized access
    put:
      summary: Update current realtor's profile
      tags:
        - Realtors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Realtor"
      responses:
        "200":
          description: Realtor profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Realtor"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized access
    delete:
      summary: Delete current realtor's profile
      tags:
        - Realtors
      responses:
        "204":
          description: Realtor profile deleted successfully
        "401":
          description: Unauthorized access
  /realtors/login:
    post:
      summary: Log in as a realtor
      tags:
        - Realtors
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        "200":
          description: Realtor logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Realtor"
        "401":
          description: Unauthorized
  /realtors/{realtorId}:
    get:
      summary: Get realtor details by ID
      tags:
        - Realtors
      parameters:
        - in: path
          name: realtorId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Realtor details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Realtor"
        "404":
          description: Realtor not found
  /realtors/{realtorId}/message: #Los mensajes no se ven desde la app. Se manda un mail.
    post:
      summary: Send a message to a realtor
      tags:
        - Realtors
      parameters:
        - in: path
          name: realtorId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              phone:
                type: string
              message:
                type: string
      responses:
        "201":
          description: Message sent successfully
        "400":
          description: Invalid input data
  /realtors/password-reset:
    post:
      summary: Send password reset email
      tags:
        - Realtors
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              email:
                type: string
                format: email
      responses:
        "200":
          description: Password reset email sent successfully
        "400":
          description: Invalid input data
  /realtors/password-reset/{token}:
    post:
      summary: Reset password
      tags:
        - Realtors
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              password:
                type: string
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid input data
  /realtors/{realtorId}/listings:
    get:
      summary: Get list of listings for a realtor
      tags:
        - Realtors
      parameters:
        - in: path
          name: realtorId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        "404":
          description: Realtor not found
  /realtors/{realtorId}/listings/{listingId}/visits:
    get:
      summary: Get list of visits for a listing
      tags:
        - Realtors
      parameters:
        - in: path
          name: realtorId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of visits retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visit"
        "404":
          description: Realtor or listing not found
  /listings:
    post:
      summary: Add a new listing
      tags:
        - Listings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
      responses:
        "201":
          description: Listing added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "400":
          description: Invalid input data
    get:
      summary: Get list of listings. 
      tags:
        - Listings
      parameters: # Posiblemente haya que agregar mas parametros. Por ejemplo, para filtrar por tipo de propiedad, etc.
        - in: query
          name: listingType
          required: true
          schema:
            ref: "#/components/schemas/ListingType"
      responses:
        "200":
          description: List of listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
  /listings/{listingId}:
    get:
      summary: Get listing details by ID
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Listing details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          description: Listing not found
    put:
      summary: Update listing details
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
      responses:
        "200":
          description: Listing details updated successfully
        "400":
          description: Invalid input data
        "404":
          description: Listing not found
    delete:
      summary: Delete a listing
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Listing deleted successfully
        "404":
          description: Listing not found
  /listings/{listingId}/visit:
    post:
      summary: Schedule a visit for a listing
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Visit"
      responses:
        "201":
          description: Visit scheduled successfully
        "400":
          description: Invalid input data or time slot not available
  /listings/{listingId}/reservation:
    post:
      summary: Reserve a listing for rent
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        "201":
          description: Listing reserved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid input data or already reserved
    get:
      summary: Get reservation details for a listing
      tags:
        - Listings
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Reservation details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "404":
          description: Listing not found
  /reservations/{reservationId}/payment:
    post:
      summary: Make a payment for a reservation
      tags:
        - Listings
      parameters:
        - in: path
          name: reservationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              cardNumber:
                type: string
              cardHolder:
                type: string
              expirationDate:
                type: string
                format: date
              cvv:
                type: string
      responses:
        "201":
          description: Payment made successfully
        "400":
          description: Invalid input data
  /reservations/{reservationId}/review:
    post:
      summary: Add a review for a reservation
      tags:
        - Listings
      parameters:
        - in: path
          name: reservationId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: Review added successfully
        "400":
          description: Invalid input data
  /users:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Successfully registered the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
  /users/login:
    post:
      summary: Log in as a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Unauthorized
  /users/me:
    get:
      summary: Get current user's profile
      tags:
        - Users
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized access
    put:
      summary: Update current user's profile
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized access
    delete:
      summary: Delete current user's profile
      tags:
        - Users
      responses:
        "204":
          description: User profile deleted successfully
        "401":
          description: Unauthorized access
  /users/me/favorites:
    get:
      summary: Get list of favorite listings
      tags:
        - Users
      responses:
        "200":
          description: List of favorite listings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
  /users/me/favorites/{listingId}:
    post:
      summary: Add listing to favorites
      tags:
        - Users
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: Listing added to favorites successfully
        "404":
          description: Listing not found
    delete:
      summary: Remove listing from favorites
      tags:
        - Users
      parameters:
        - in: path
          name: listingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Listing removed from favorites successfully
        "404":
          description: Listing not found
components:
  schemas:
    Review: 
      type: object
      properties:
        date:
          type: string
          format: date-time
        rating:
          type: number
        comment:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        role:
          type: string
          enum:
            - user
            - realty
            - admin
    Realtor:
      type: object
      properties:
        name:
          type: string
        contactEmail:
          type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    Property:
      type: object
      properties:
        title:
          type: string
        realtyId:
          type: integer
        description:
          type: string
        status:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        geolocation:
          $ref: '#/components/schemas/Geolocation'
        type:
          type: string
        sqm:
          $ref: '#/components/schemas/Sqm'
        cardinalOrientation:
          type: string
        price:
          type: number
        amenities:
          type: array
          items:
            type: string
        pictures:
          type: array
          items:
            type: string
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
    Geolocation:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
    Sqm:
      type: object
      properties:
        covered:
          type: number
        uncovered:
          type: number
    Listing:
      type: object
      properties:
        id:
          type: integer
        propertyId:
          type: integer
        realtyId:
          type: integer
        listingType:
          $ref: '#/components/schemas/ListingType'
        creationDate:
          type: string
          format: date-time
    ListingType:
      type: string
      enum:
        - sale
        - rent
    Reservation:
      type: object
      properties:
        listingId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        reservationDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - pending
            - accepted
        review: #la review la guardamos aca o en realtor? se podria dejar un flag para saber si ya se hizo o no y guardar en el realtor.
          $ref: '#/components/schemas/Review'
    Visit:
      type: object
      properties:
        userId:
          type: integer
        realtyId:
          type: integer
        date:
          type: string
          format: date
        time:
          type: string
          enum: 
            - morning
            - afternoon
        creationDate:
          type: string
          format: date-time
